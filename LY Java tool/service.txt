// ContractService.java
package com.ascendcargo.contractmgt.service;

@Service
@Transactional
@RequiredArgsConstructor
public class ContractService {
    private final ContractRepository contractRepository;
    private final OrganizationService organizationService;
    private final LaneService laneService;

    public Contract createContract(Contract contract) {
        validateContractDates(contract);
        validateContractReference(contract.getContractReference());
        
        // 确保关联组织存在
        organizationService.getOrganization(contract.getOrganization().getId());
        
        Contract savedContract = contractRepository.save(contract);
        
        // 级联处理运输通道
        if (contract.getLanes() != null) {
            contract.getLanes().forEach(lane -> {
                lane.setContract(savedContract);
                laneService.createLane(lane);
            });
        }
        return savedContract;
    }

    public Contract activateContract(Long contractId) {
        Contract contract = getContract(contractId);
        if (contract.getEffectiveDate().isAfter(LocalDate.now())) {
            throw new IllegalStateException("Cannot activate contract before effective date");
        }
        contract.setStatus(Contract.ContractStatus.ACTIVE);
        return contractRepository.save(contract);
    }

    @Transactional(readOnly = true)
    public Contract getContract(Long id) {
        return contractRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Contract not found"));
    }

    private void validateContractDates(Contract contract) {
        if (contract.getEffectiveDate().isAfter(contract.getExpirationDate())) {
            throw new IllegalArgumentException("Effective date cannot be after expiration date");
        }
    }

    private void validateContractReference(String ref) {
        if (ref != null && contractRepository.existsByContractReference(ref)) {
            throw new IllegalStateException("Contract reference must be unique");
        }
    }

    public Contract findByContractReference(String contractRef) {
        return contractRepository.findByContractReference(contractRef)
                .orElseThrow(() -> new EntityNotFoundException("Contract not found with reference: " + contractRef));
    }
}
// FILE_END 

// LaneService.java
package com.ascendcargo.contractmgt.service;

@Service
@Transactional
@RequiredArgsConstructor
public class LaneService {
    private final LaneRepository laneRepository;
    private final LocationService locationService;
    private final RouteService routeService;

    public Lane createLane(Lane lane) {
        validateFacilityTypes(lane);
        Lane savedLane = laneRepository.save(lane);

        // 处理地理关联
        if (lane.getLaneLocations() != null) {
            lane.getLaneLocations().forEach(ll -> {
                locationService.validateLocationType(ll.getLocation(), ll.getType());
                ll.getId().setLaneId(savedLane.getId());
                laneRepository.save(savedLane);
            });
        }

        // 处理运输路线
        if (lane.getRoutes() != null) {
            lane.getRoutes().forEach(route -> {
                route.setLane(savedLane);
                routeService.createRoute(route);
            });
        }
        return savedLane;
    }

    private void validateFacilityTypes(Lane lane) {
        if (lane.getOriginType() == lane.getDestinationType() && 
            lane.getOriginType() == Lane.FacilityType.PORT) {
            throw new IllegalArgumentException("Port-to-port lanes require special approval");
        }
    }

    public Lane getLaneById(Long id) {
        return laneRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Lane not found with id: " + id));
    }

    public List<Lane> getLanesByContractId(Long contractId) {
        return laneRepository.findByContractId(contractId);
    }
}
// FILE_END 

// LocationService.java
package com.ascendcargo.contractmgt.service;

@Service
@Transactional
@RequiredArgsConstructor
public class LocationService {
    private final LocationRepository locationRepository;

    public Location createLocation(Location location) {
        if (location.getCode() != null && locationRepository.existsByCode(location.getCode())) {
            throw new IllegalStateException("Location code must be unique");
        }
        return locationRepository.save(location);
    }

    public void validateLocationType(Location location, LaneLocation.PointType pointType) {
        switch (pointType) {
            case ORIGIN:
                if (!location.getType().equals(Location.LocationType.PORT)) {
                    throw new IllegalArgumentException("Origin point must be a port");
                }
                break;
            case DESTINATION:
                if (location.getType().equals(Location.LocationType.CUSTOMS)) {
                    throw new IllegalArgumentException("Customs cannot be destination");
                }
                break;
            case VIA_POINT:
                // No specific validation for via points
                break;
        }
    }

    public Location getLocationById(Long id) {
        return locationRepository.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Location not found with id: " + id));
    }

    public Location getLocationByCode(String code) {
        return locationRepository.findByCode(code)
            .orElseThrow(() -> new IllegalArgumentException("Location not found with code: " + code));
    }
}
// FILE_END 

// OrganizationService.java
package com.ascendcargo.contractmgt.service;

@Service
@Transactional
@RequiredArgsConstructor
public class OrganizationService {
    private final OrganizationRepository organizationRepository;

    public Organization createOrganization(Organization organization) {
        if (organizationRepository.existsByTaxId(organization.getTaxId())) {
            throw new IllegalStateException("Tax ID already exists");
        }
        return organizationRepository.save(organization);
    }

    @Transactional(readOnly = true)
    public Organization getOrganization(Long id) {
        return organizationRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Organization not found"));
    }

    public Organization updateLegalName(Long id, String newLegalName) {
        Organization org = getOrganization(id);
        org.setLegalName(newLegalName);
        return organizationRepository.save(org);
    }
}
// FILE_END 

// RateService.java
package com.ascendcargo.contractmgt.service;

@Service
@Transactional
@RequiredArgsConstructor
public class RateService {
    private final RateRepository rateRepository;

    public Rate createRate(Rate rate) {
        validateRatePeriod(rate);
        return rateRepository.save(rate);
    }

    public BigDecimal calculateCharge(Rate rate, BigDecimal weight) {
        switch (rate.getBasisType()) {
            case FLAT:
                return rate.getCost().max(rate.getMinCharge()).min(rate.getMaxCharge());
            case PER_KG:
                return calculateWeightBased(rate, weight);
            default:
                throw new UnsupportedOperationException("Calculation method not implemented");
        }
    }

    private BigDecimal calculateWeightBased(Rate rate, BigDecimal weight) {
        BigDecimal base = rate.getCost().multiply(weight);
        return base.max(rate.getMinCharge()).min(rate.getMaxCharge());
    }

    private void validateRatePeriod(Rate rate) {
        if (rate.getEffectiveDate().isAfter(rate.getExpirationDate())) {
            throw new IllegalArgumentException("Rate period is invalid");
        }
    }

    public List<Rate> getRatesByRouteId(Long routeId) {
        return rateRepository.findByRouteId(routeId);
    }

    public Rate getRateById(Long rateId) {
        return rateRepository.findById(rateId)
            .orElseThrow(() -> new EntityNotFoundException("Rate not found with id: " + rateId));
    }
}
// FILE_END 

// RouteService.java
package com.ascendcargo.contractmgt.service;

@Service
@Transactional
@RequiredArgsConstructor
public class RouteService {
    private final RouteRepository routeRepository;
    private final OrganizationService organizationService;
    private final RateService rateService;

    public Route createRoute(Route route) {
        validateCarrier(route.getCarrier().getId());
        Route savedRoute = routeRepository.save(route);

        // 处理费率
        if (route.getRates() != null) {
            route.getRates().forEach(rate -> {
                rate.setRoute(savedRoute);
                rateService.createRate(rate);
            });
        }
        return savedRoute;
    }

    public List<Route> findAvailableRoutes(Long laneId, LocalDate shipmentDate) {
        return routeRepository.findByLane_Id(laneId).stream()
                .filter(route -> isRouteAvailable(route, shipmentDate))
                .collect(Collectors.toList());
    }

    private boolean isRouteAvailable(Route route, LocalDate date) {
        return route.getRates().stream()
                .anyMatch(rate -> rate.isEffectiveOn(date));
    }

    private void validateCarrier(Long carrierId) {
        organizationService.getOrganization(carrierId); // 确保承运商存在
    }

    public List<Route> getRoutesByLaneId(Long laneId) {
        return routeRepository.findByLane_Id(laneId);
    }

    public Route getRouteById(Long id) {
        return routeRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Route not found with id: " + id));
    }
}
// FILE_END 
