// Contract.java
package com.ascendcargo.contractmgt.model;

@Entity
@Table(name = "contracts")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Contract {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "org_id", nullable = false)
    private Organization organization;

    @Column(name = "contract_ref", unique = true)
    private String contractReference;

    @Enumerated(EnumType.STRING)
    private ContractStatus status = ContractStatus.DRAFT;

    @Column(name = "effective_date")
    private LocalDate effectiveDate;

    @Column(name = "expiration_date")
    private LocalDate expirationDate;

    @OneToMany(mappedBy = "contract", cascade = CascadeType.ALL)
    private Set<Lane> lanes = new HashSet<>();

    public enum ContractStatus {
        DRAFT, ACTIVE, EXPIRED
    }
}
// FILE_END 

// ContractAccessorial.java
package com.ascendcargo.contractmgt.model;

@Entity
@Table(name = "contract_accessorials")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class ContractAccessorial {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "contract_id", nullable = false)
    private Contract contract;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private AccessorialType type;

    @Lob // 对应TEXT类型
    @Column(name = "calculation_method")
    private String calculationMethod;

    public enum AccessorialType {
        FUEL_SURCHARGE, // 对应数据库枚举值 fuel_surcharge
        DETENTION, // 对应数据库枚举值 detention
        DEMURRAGE // 对应数据库枚举值 demurrage
    }

    public class Type {// to do
    }
}
// FILE_END 

// Document.java
package com.ascendcargo.contractmgt.model;

@Entity
@Table(name = "documents")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Document {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "contract_id", nullable = false)
    private Contract contract;

    @Column(name = "doc_type")
    private String docType;

    @Column(name = "s3_key", unique = true)
    private String s3Key;

    @Column(name = "created_by")
    private Integer createdBy; // 根据业务需要可改为关联用户实体

    @CreationTimestamp
    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;
}
// FILE_END 

// Equipment.java
package com.ascendcargo.contractmgt.model;

@Entity
@Table(name = "equipment")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Equipment {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String type;

    @Column(name = "iso_code")
    private String isoCode;

    @Column(precision = 10, scale = 2)
    private BigDecimal capacity;

    @Enumerated(EnumType.STRING)
    private EquipmentUnit unit;

    public enum EquipmentUnit {
        TEU, // 对应数据库枚举值 TEU
        FEU, // 对应数据库枚举值 FEU
        TON, // 对应数据库枚举值 ton
        CBM // 对应数据库枚举值 cbm
    }
}
// FILE_END 

// Lane.java
package com.ascendcargo.contractmgt.model;

@Entity
@Table(name = "lanes")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Lane {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "contract_id", nullable = false)
    private Contract contract;

    private String name;
    private String description;

    @Enumerated(EnumType.STRING)
    @Column(name = "origin_type")
    private FacilityType originType;

    @Enumerated(EnumType.STRING)
    @Column(name = "destination_type")
    private FacilityType destinationType;

    @OneToMany(mappedBy = "lane", cascade = CascadeType.ALL)
    private Set<Route> routes = new HashSet<>();

    @OneToMany(mappedBy = "lane", cascade = CascadeType.ALL)
    private Set<LaneLocation> laneLocations = new HashSet<>();

    public enum FacilityType {
        TERMINAL, WAREHOUSE, PORT
    }
}
// FILE_END 

// LaneLocation.java
package com.ascendcargo.contractmgt.model;

@Entity
@Table(name = "lane_locations")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class LaneLocation {
    @EmbeddedId
    private LaneLocationId id;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("laneId")
    private Lane lane;

    @ManyToOne(fetch = FetchType.LAZY)
    @MapsId("locationId")
    private Location location;

    @Column(insertable = false, updatable = false)
    private PointType type;

    private Integer sequence;

    public enum PointType {
        ORIGIN, DESTINATION, VIA_POINT
    }
}
// FILE_END 

// LaneLocationId.java
package com.ascendcargo.contractmgt.model;

@Embeddable
@Data
@NoArgsConstructor
@AllArgsConstructor
public class LaneLocationId implements Serializable {
    private Long laneId;
    private Long locationId;
    private PointType type;
}
// FILE_END 

// Location.java
package com.ascendcargo.contractmgt.model;

@Entity
@Table(name = "locations")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Location {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "org_id")
    private Organization organization;

    @Enumerated(EnumType.STRING)
    private LocationType type;

    private String code;
    private String name;
    private String address;
    private String city;
    private String state;

    @Column(length = 2)
    private String country;

    @Column(columnDefinition = "POINT SRID 4326")
    //TO DO
    //@Type(value = org.hibernate.spatial.GeometryType.class)
    private Point coordinates;

    public enum LocationType {
        PORT, TERMINAL, WAREHOUSE, CUSTOMS
    }
}
// FILE_END 

// Organization.java
package com.ascendcargo.contractmgt.model;

@Entity
@Table(name = "organizations")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Organization {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    @Column(name = "legal_name")
    private String legalName;

    @Column(name = "tax_id")
    private String taxId;

    @CreationTimestamp
    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;
}
// FILE_END 

// Rate.java
package com.ascendcargo.contractmgt.model;

@Entity
@Table(name = "rates")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Rate {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "route_id", nullable = false)
    private Route route;

    @Enumerated(EnumType.STRING)
    @Column(name = "basis_type")
    private RateBasisType basisType;

    @Column(length = 3)
    private String currency;

    @Column(precision = 12, scale = 4)
    private BigDecimal cost;

    @Column(precision = 12, scale = 4)
    private BigDecimal revenue;

    @Column(name = "min_charge", precision = 12, scale = 2)
    private BigDecimal minCharge;

    @Column(name = "max_charge", precision = 12, scale = 2)
    private BigDecimal maxCharge;

    @Column(name = "effective_date")
    private LocalDate effectiveDate;

    @Column(name = "expiration_date")
    private LocalDate expirationDate;

    public enum RateBasisType {
        FLAT, PERCENTAGE, PER_KG, PER_LB, PER_CU_FT
    }

    public boolean isEffectiveOn(LocalDate date) {
        return (date.isEqual(effectiveDate) || date.isAfter(effectiveDate)) 
            && (expirationDate == null || date.isBefore(expirationDate) || date.isEqual(expirationDate));
    }
}
// FILE_END 

// Route.java
package com.ascendcargo.contractmgt.model;

@Entity
@Table(name = "routes")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Route {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "lane_id", nullable = false)
    private Lane lane;

    @Enumerated(EnumType.STRING)
    private TransportMode mode;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "carrier_org_id", nullable = false)
    private Organization carrier;

    @Column(name = "equipment_type")
    private String equipmentType;

    private BigDecimal distance;

    @Enumerated(EnumType.STRING)
    @Column(name = "distance_unit")
    private DistanceUnit distanceUnit;

    @Column(name = "transit_time")
    private Integer transitTime; // hours

    private Integer capacity;

    @OneToMany(mappedBy = "route", cascade = CascadeType.ALL)
    private Set<Rate> rates = new HashSet<>();

    public enum TransportMode {
        SEA, RAIL, TRUCK, AIR
    }

    public enum DistanceUnit {
        KM, MILE
    }
}
// FILE_END 
